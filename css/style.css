@import url('https://fonts.googleapis.com/css?family=PT+Sans');

/* CSS variables */
:root {
  --primary-color: #b90415;
  --primary-color-hover: #d3071b;
  --secondary-color: #103063;
  --secondary-color-hover: #143f85;
  --light-color: #f4f4f4;
}

body {
  font-family: 'PT Sans', sans-serif;
  background-color: #252529;
  margin: 0;
  color: #fff;
  /* https://www.w3schools.com/cssref/pr_dim_line-height.asp */
  line-height: 1.6;
}

img {
  width: 100%;
}

a {
  text-decoration: none;
  color: #cccccc;
}

/* Section */
.section {
  padding: 2rem 0;
}

.section-head {
  font-size: 2.5rem;
  margin: 0;
}

.section h3 {
  font-size: 2rem;
}

.section#entertainment {
  /* The background-image property sets one or more background images for an element.
  By default, a background-image is placed at the top-left corner of an element, and repeated both vertically and horizontally. */
  /* background-position: bottom;     Place image at the bottom of the container
    background-repeat: no-repeat;     Do not repeat the image
    background-size: cover;           Resize the background image to cover the entire container */
  background: url(../img/section-bg.jpg) no-repeat bottom/cover;
  padding: 10rem 0;
}

.gift-cards {
  display: grid;
  grid-gap: 20px;
  /* The grid-template-columns property specifies the number (and the widths) of columns in a grid layout.
  The values are a space separated list, where each value specifies the size of the respective column. */
  /* fr = fraction */
  grid-template-columns: 1fr 1fr;
  /*  the same as above
  grid-template-columns: repeat(2. 1fr); */
  text-align: left;
}


/* Showcase */

#showcase {
  margin: 0;
  padding: 0;
  /* cover - cover content */
  background: url('../img/showcase.jpg ') no-repeat center/cover;
  width: 100%;
  /* vh - viewportheight
  The viewport is the user's visible area of a web page. © w3school
  vh
  Equal to 1% of the height of the viewport's initial containing block.©MDN*/
  height: 100vh;
  /* An element with position: relative; is positioned relative to its normal position.
  Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position(@db: position:static - which is default). Other content will not be adjusted to fit into any gap left by the element. ©w3school*/
  position: relative;
  /* The CSS overflow property controls what happens to content that is too big to fit into an area. ©w3school */
  overflow-y: hidden;
}

#showcase .container {
  /* 25% of screen heigth */
  margin-top: 25vh;
}

#showcase h1 {
  font-size: 4rem;
  /* NOTE: 1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px.
  The size can be calculated from pixels to em using this formula: pixels/16=em ©w3school*/
  /* REM as in Root EM. While em is relative to the font size of its direct or nearest parent, rem is only relative to the html (root) font-size . I like to think of it as a reset. If a style sheet is built in a modular fashion, then rem shouldn't be needed very often, but it can be handy at times. */
  margin-bottom: 0;
}

#showcase h2 {
  font-size: 2rem;
}

/* Footer */

footer .footer-cols {
  display: grid;
  grid-gap: 20px;
  grid-template-columns: repeat(4, 1fr);
  padding: 2rem;
  text-align: left;
  font-size: 14px;
}

footer .footer-cols ul {
  list-style: none;
}

footer .footer-cols ul li:first-child {
  font-size: 1.2rem;
  padding-bottom: 0.5rem;
  border-bottom: #444 solid 1px;
  margin-bottom: 1rem;
}

footer .footer-bottom {
  background: #333;
  padding: 0.3rem;
}

/* Utility classes */

.container {
  max-width: 1180px;
  text-align: center;
  margin: 0 auto;
  /* 1rem = font-size which is 16px by default, so here we have 48px  */
  padding: 0 3rem;
}

.lead {
  font-size: 1.3rem;
}

.text-center {
  text-align: center;
}

/* Buttons */

.btn {
  padding: 1rem;
  color: #ffffff;
  /* Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element.

  Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.

  Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements. */
  display: inline-block;
}

.btn-primary {
  background: var(--primary-color);
}

.btn-primaryhover {
  background: var(--primary-color-hover);
}

.btn-secondary {
  background: var(--secondary-color);
}

.btn-secondaryhover {
  background: var(--secondary-color-hover);
}

/* Text color */
.text-primary {
  color: var(--primary-color);
}

.text-secondary {
  color: var(--secondary-color);
}

.text-light {
  color: var(--light-color);
}

.bg-light {
  background: var(--light-color);
  color: #333333;
}

.mb {
  margin-bottom: 1rem;
}

.mt {
  margin-top: 1rem;
}

/* Navbar */
nav {
  height: 40px;
  width: 100%;
  background-color: #333;
  color: #eee;
  /* fixed to top */
  position: fixed;
}

nav ul {
  padding: 0;
  margin: 0;
}

nav li {
  display: inline;
  float: left;
}

nav a {
  display: inline-block;
  width: 100px;
  text-align: center;
  text-decoration: none;
  padding: 10px 0;
  color: #eee;
  text-decoration: none;
}

nav li:hover {
  background-color: #444;
}

nav a#openup {
  display: none;
}

@media screen and (max-width: 580px) {

  .hide-on-small {
    display: none;
  }

  #showcase {
    height: 50vh;
  }

  #showcase .container {
    margin-top: 20vh;
  }

  #showcase h1 {
    font-size: 3rem;
  }

  #showcase h2 {
    font-size: 1.5rem;
  }

  nav {
    height: auto;
    border-bottom: 0;
  }

  nav ul {
    display: none;
    height: auto;
  }

  nav li {
    width: 100%;
    float: left;
    position: relative;
  }

  nav a {
    text-align: left;
    width: 100%;
    text-indent: 25px;
    background: #333;
    border-bottom: 1px solid #555;
  }

  nav a:hover {
    background: #444;
  }

  nav a#openup:after {
    content: "|||";
    transform: rotate(-90deg);
    -ms-transform: rotate(-90deg);
    /* IE 9 */
    -webkit-transform: rotate(-90deg);
    /* Safari and Chrome */
    width: 30px;
    height: 30px;
    display: inline-block;
    position: absolute;
    right: 5px;
    top: 20px;
  }

  nav a#openup {
    display: block;
    background-color: #333;
    width: 100%;
    position: relative;
  }
}

.cf:before,
.cf:after {
  content: "";
  display: table;
}

.cf:after {
  clear: both;
}

.cf {
  zoom: 1;
}


@media screen and (max-width: 780px) {
  .gift-cards {
    grid-template-columns: 1fr;
  }

  footer .footer-cols {
    display: none;
  }
}

@media screen and (max-height: 580px) {
  #showcase p.lead {
    display: none;
  }
}